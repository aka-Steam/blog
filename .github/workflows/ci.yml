name: CI Pipeline

on: [push, pull_request]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------- Backend ----------
      - name: Setup Node.js for Backend
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies (Backend)
        working-directory: backend
        run: npm install

      - name: Run Backend Tests
        working-directory: backend
        run: npm test -- --coverage
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

      # ---------- Frontend ----------
      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (Frontend)
        working-directory: frontend
        run: npm install

      - name: Run Frontend Tests
        working-directory: frontend
        run: npm test -- --coverage
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            backend/coverage
            frontend/coverage

  sonarqube-scan:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: .

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=blog-app
            -Dsonar.sources=./backend/src,./frontend/src
            -Dsonar.tests=./backend/src,./frontend/src
            -Dsonar.test.inclusions=**/*.spec.js,**/*.test.js
            -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/node_modules/**,**/*.test.js,**/*.spec.js
            -Dsonar.qualitygate.wait=true

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, sonarqube-scan]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (Frontend)
        working-directory: frontend
        run: npm install

      - name: Build Frontend
        working-directory: frontend
        run: npm run build

      - name: Build Backend Docker image
        run: docker build -t swerthk/blog-backend:latest ./backend

      - name: Build Frontend Docker image
        run: docker build -t swerthk/blog-frontend:latest ./frontend

  docker-push:
    name: Push Docker Images
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Backend Docker image
        run: docker push swerthk/blog-backend:latest

      - name: Push Frontend Docker image
        run: docker push swerthk/blog-frontend:latest

  deploy:
    needs: [sonarqube-scan, docker-push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure YC CLI
        uses: yandex-cloud/yc-cli-action@v1
        with:
          service-account-key: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
          folder-id: ${{ secrets.YC_FOLDER_ID }}

      - name: Deploy to Kubernetes
        run: |
          yc managed-kubernetes cluster get-credentials <cluster-name> --external
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/frontend/
          kubectl apply -f k8s/backend/
          kubectl apply -f k8s/sonarqube/
