import Post from '../models/Post.js';
import User from '../models/User.js';
import { bot } from '../bot.js';

export const getLastTags = async (req, res) => {
    try {
        const posts = await Post.findAll({
            limit: 5,
            order: [['createdAt', 'DESC']],
        });

        const tags = posts
            .map((post) => post.tags)
            .flat()
            .slice(0, 5);

        res.json(tags);
    } catch (err) {
        console.log(err);
        res.status(500).json({
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—ç–≥–∏',
        });
    }
};

export const getAll = async (req, res) => {
    try {
        const posts = await Post.findAll({
            include: [{ model: User, as: 'user', attributes: ['id', 'fullName', 'email'] }],
            order: [['createdAt', 'DESC']],
        });
        res.json(posts);
    } catch (err) {
        console.log(err);
        res.status(500).json({
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å–∏',
        });
    }
};

export const getOne = async (req, res) => {
    try {
        const postId = req.params.id;

        const post = await Post.findByPk(postId, {
            include: [{ model: User, as: 'user', attributes: ['id', 'fullName', 'email'] }],
        });

        if (!post) {
            return res.status(404).json({
                message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            });
        }

        post.viewsCount += 1;
        await post.save();

        res.json(post);
    } catch (err) {
        console.log(err);
        res.status(500).json({
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é',
        });
    }
};

export const remove = async (req, res) => {
    try {
        const postId = req.params.id;

        const post = await Post.findByPk(postId);

        if (!post) {
            return res.status(404).json({
                message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
            });
        }

        await post.destroy();

        res.json({
            success: true,
        });
    } catch (err) {
        console.log(err);
        res.status(500).json({
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é',
        });
    }
};

export const create = async (req, res) => {
    try {
        const { title, text, imageUrl, tags } = req.body;

        const post = await Post.create({
            title,
            text,
            imageUrl,
            tags: tags,
            userId: req.userId,
        });

        res.json(post);
        const userIds = [369309169, 831698544]; // —Å–ø–∏—Å–æ–∫ Telegram ID

        const message = `üìù –í—ã—à–ª–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è!\n\nüìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${post.title}\nüè∑Ô∏è –¢–µ–≥–∏: ${post.tags.join(', ')}\n\n–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ ‚Äî —ç—Ç–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å!`;

        for (const userId of userIds) {
            bot.telegram.sendMessage(userId, message).catch((err) => {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, err);
            });
        }


    } catch (err) {
        console.log(err);
        res.status(500).json({
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é',
        });
    }
};

export const update = async (req, res) => {
    try {
        const post = await Post.findByPk(req.params.id);
        if (!post) {
            return res.status(404).json({ message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        post.title = req.body.title;
        post.text = req.body.text;
        post.imageUrl = req.body.imageUrl;
        post.tags = req.body.tags;
        post.userId = req.userId;
        await post.save();
        res.json({ success: true });
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é' });
    }
};
